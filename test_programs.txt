------------------------------------------------------------------------
Test 1:	No branches
------------------------------------------------------------------------
# This program simply takes 2 inputs, 
# Performs some operations on them,
# and stores the results in some register.
Start:	addi $1, $0, 6		#store 6 into $1
	addi $2, $0, 2		#store 2 into $2
	add $3, $1, $2		#compute 6 + 2
	sub $4, $1, $2		#compute 6 - 2
	mult $1, $2		#compute 6 * 2
	mflo $5			#small number assumed
	div $1, $2		#compute 6 / 2
	mflo $6			#small number assumed
	add $0, $0, $0		#stall before terminating
------------------------------------------------------------------------
Test 2: Always Branch Taken
------------------------------------------------------------------------
#This program simply performs a loop 20 times
#And stores the running sum.
Start:		addi $1, $0, 2			#store 2 into $1. This is a constant.
		addi $2, $0, 0			#store  into $1
		slti $3, $1, 3			#check if $1 = 2 > 3
		add $0, $0, $0
		add $0, $0, $0
		add $0, $0, $0
		bne $3, $0, Take1		#it is not, thus the branch is taken
		add $0, $0, $0			
Take1:		slti $3, $1, 3			#check if $1 = 2 > 3
		bne $3, $0, Take2		#it is not, thus the branch is taken
		add $0, $0, $0		
Take2:		slti $3, $1, 3			#--
		bne $3, $0, Take3		
		add $0, $0, $0
Take3:		slti $3, $1, 3			
		bne $3, $0, Take4
		add $0, $0, $0
Take4:		slti $3, $1, 3			#--
		bne $3, $0, Take5	
		add $0, $0, $0
Take5:		slti $3, $1, 3			#--
		bne $3, $0, Take6
		add $0, $0, $0
Take6:		slti $3, $1, 3			#--
		bne $3, $0, Take7
		add $0, $0, $0
Take7:		slti $3, $1, 3			
		bne $3, $0, Take8
		add $0, $0, $0
Take8:		slti $3, $1, 3			#--
		bne $3, $0, Take9
		add $0, $0, $0
Take9:		slti $3, $1, 3			
		bne $3, $0, Take10
		add $0, $0, $0
Take10:		slti $3, $1, 3			#--
		bne $3, $0, Take11
		add $0, $0, $0
Take11:		slti $3, $1, 3			
		bne $3, $0, Take12
		add $0, $0, $0
Take12:		slti $3, $1, 3			#--
		bne $3, $0, Take13
		add $0, $0, $0
Take13:		slti $3, $1, 3			
		bne $3, $0, Take14
		add $0, $0, $0
Take14:		slti $3, $1, 3			#--
		bne $3, $0, Take15
		add $0, $0, $0
Take15:		slti $3, $1, 3			
		bne $3, $0, Take16
		add $0, $0, $0
Take16:		slti $3, $1, 3			#check if $1 = 2 > 3
		bne $3, $0, Take17		#it is not, thus the branch is taken
		add $0, $0, $0			
Take17:		slti $3, $1, 3			#check if $1 = 2 > 3
		bne $3, $0, Take18		#it is not, thus the branch is taken
		add $0, $0, $0	
Take18:		slti $3, $1, 3			
		bne $3, $0, Take19
		add $0, $0, $0
Take19:		slti $3, $1, 3			
		bne $3, $0, Take20
		add $0, $0, $0			
Take20:		add $0, $0, $0			#stall before terminating
------------------------------------------------------------------------
Test 3: Alternate Taken/Not Taken (Modified Test 2)
------------------------------------------------------------------------
#This program simply makes a sequences of branches (by alternatively taking, then not taking the branches)
#A total of 20 branches will be assessed.
#The final result stored in $2 is basically the number of not taken branches.

Start:		addi $1, $0, 2			#store 2 into $1. This is a constant.
		addi $2, $0, 0			#store  into $1
		slti $3, $1, 1			#check if $1 = 2 > 1
		bne $3, $0, Notake1		#it is, thus the branch is not taken
		addi $2, $2, 1			#increment $2
Notake1:	slti $3, $1, 3			#check if $1 = 2 > 3
		bne $3, $0, Take1		#it is not, thus the branch is taken
		addi $2, $2, 1			#this code is not reached
Take1:		slti $3, $1, 1			#--
		bne $3, $0, Notake2		
		addi $2, $2, 1
Notake2:	slti $3, $1, 3			
		bne $3, $0, Take2
		addi $2, $2, 1
Take2:		slti $3, $1, 1			#--
		bne $3, $0, Notake3	
		addi $2, $2, 1
Notake3:	slti $3, $1, 3			
		bne $3, $0, Take3
		addi $2, $2, 1
Take3:		slti $3, $1, 1			#--
		bne $3, $0, Notake4
		addi $2, $2, 1
Notake4:	slti $3, $1, 3			
		bne $3, $0, Take4
		addi $2, $2, 1
Take4:		slti $3, $1, 1			#--
		bne $3, $0, Notake5
		addi $2, $2, 1
Notake5:	slti $3, $1, 3			
		bne $3, $0, Take5
		addi $2, $2, 1
Take5:		slti $3, $1, 1			#--
		bne $3, $0, Notake6
		addi $2, $2, 1
Notake6:	slti $3, $1, 3			
		bne $3, $0, Take6
		addi $2, $2, 1
Take6:		slti $3, $1, 1			#--
		bne $3, $0, Notake7
		addi $2, $2, 1
Notake7:	slti $3, $1, 3			
		bne $3, $0, Take7
		addi $2, $2, 1
Take7:		slti $3, $1, 1			#--
		bne $3, $0, Notake8
		addi $2, $2, 1
Notake8:	slti $3, $1, 3			
		bne $3, $0, Take8
		addi $2, $2, 1
Take8:		slti $3, $1, 1			#--
		bne $3, $0, Notake9
		addi $2, $2, 1
Notake9:	slti $3, $1, 3			
		bne $3, $0, Take9
		addi $2, $2, 1
Take9:		slti $3, $1, 1			#check if $1 = 2 > 1
		bne $3, $0, Notake10		#it is, thus the branch is not taken
		addi $2, $2, 1			#increment $2
Notake10:	slti $3, $1, 3			#check if $1 = 2 > 3
		bne $3, $0, Take10		#it is not, thus the branch is taken
		addi $2, $2, 1			#this code is not reached
Take10:		add $0, $0, $0			#stall before terminating


